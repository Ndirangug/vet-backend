// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VetsBackendClient is the client API for VetsBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VetsBackendClient interface {
	TestHello(ctx context.Context, in *TestHelloRequest, opts ...grpc.CallOption) (*TestHelloResponse, error)
	GetVeterinarians(ctx context.Context, in *VetRequest, opts ...grpc.CallOption) (VetsBackend_GetVeterinariansClient, error)
	GetVeterinarian(ctx context.Context, in *VetRequest, opts ...grpc.CallOption) (*Veterinary, error)
	UpdateVeterian(ctx context.Context, in *Veterinary, opts ...grpc.CallOption) (*Veterinary, error)
	UpdateFarmer(ctx context.Context, in *Farmer, opts ...grpc.CallOption) (*Farmer, error)
	CreateVeterian(ctx context.Context, in *Veterinary, opts ...grpc.CallOption) (*Veterinary, error)
	CreateFarmer(ctx context.Context, in *Farmer, opts ...grpc.CallOption) (*Farmer, error)
	GetFarmer(ctx context.Context, in *FarmerRequest, opts ...grpc.CallOption) (*Farmer, error)
	ScheduleSession(ctx context.Context, in *TreatmentSessionRequest, opts ...grpc.CallOption) (*TreatmentSession, error)
}

type vetsBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewVetsBackendClient(cc grpc.ClientConnInterface) VetsBackendClient {
	return &vetsBackendClient{cc}
}

func (c *vetsBackendClient) TestHello(ctx context.Context, in *TestHelloRequest, opts ...grpc.CallOption) (*TestHelloResponse, error) {
	out := new(TestHelloResponse)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/TestHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetsBackendClient) GetVeterinarians(ctx context.Context, in *VetRequest, opts ...grpc.CallOption) (VetsBackend_GetVeterinariansClient, error) {
	stream, err := c.cc.NewStream(ctx, &VetsBackend_ServiceDesc.Streams[0], "/vet_backend.VetsBackend/GetVeterinarians", opts...)
	if err != nil {
		return nil, err
	}
	x := &vetsBackendGetVeterinariansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VetsBackend_GetVeterinariansClient interface {
	Recv() (*Veterinary, error)
	grpc.ClientStream
}

type vetsBackendGetVeterinariansClient struct {
	grpc.ClientStream
}

func (x *vetsBackendGetVeterinariansClient) Recv() (*Veterinary, error) {
	m := new(Veterinary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vetsBackendClient) GetVeterinarian(ctx context.Context, in *VetRequest, opts ...grpc.CallOption) (*Veterinary, error) {
	out := new(Veterinary)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/GetVeterinarian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetsBackendClient) UpdateVeterian(ctx context.Context, in *Veterinary, opts ...grpc.CallOption) (*Veterinary, error) {
	out := new(Veterinary)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/UpdateVeterian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetsBackendClient) UpdateFarmer(ctx context.Context, in *Farmer, opts ...grpc.CallOption) (*Farmer, error) {
	out := new(Farmer)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/UpdateFarmer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetsBackendClient) CreateVeterian(ctx context.Context, in *Veterinary, opts ...grpc.CallOption) (*Veterinary, error) {
	out := new(Veterinary)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/CreateVeterian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetsBackendClient) CreateFarmer(ctx context.Context, in *Farmer, opts ...grpc.CallOption) (*Farmer, error) {
	out := new(Farmer)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/CreateFarmer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetsBackendClient) GetFarmer(ctx context.Context, in *FarmerRequest, opts ...grpc.CallOption) (*Farmer, error) {
	out := new(Farmer)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/GetFarmer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetsBackendClient) ScheduleSession(ctx context.Context, in *TreatmentSessionRequest, opts ...grpc.CallOption) (*TreatmentSession, error) {
	out := new(TreatmentSession)
	err := c.cc.Invoke(ctx, "/vet_backend.VetsBackend/ScheduleSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VetsBackendServer is the server API for VetsBackend service.
// All implementations must embed UnimplementedVetsBackendServer
// for forward compatibility
type VetsBackendServer interface {
	TestHello(context.Context, *TestHelloRequest) (*TestHelloResponse, error)
	GetVeterinarians(*VetRequest, VetsBackend_GetVeterinariansServer) error
	GetVeterinarian(context.Context, *VetRequest) (*Veterinary, error)
	UpdateVeterian(context.Context, *Veterinary) (*Veterinary, error)
	UpdateFarmer(context.Context, *Farmer) (*Farmer, error)
	CreateVeterian(context.Context, *Veterinary) (*Veterinary, error)
	CreateFarmer(context.Context, *Farmer) (*Farmer, error)
	GetFarmer(context.Context, *FarmerRequest) (*Farmer, error)
	ScheduleSession(context.Context, *TreatmentSessionRequest) (*TreatmentSession, error)
	mustEmbedUnimplementedVetsBackendServer()
}

// UnimplementedVetsBackendServer must be embedded to have forward compatible implementations.
type UnimplementedVetsBackendServer struct {
}

func (UnimplementedVetsBackendServer) TestHello(context.Context, *TestHelloRequest) (*TestHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestHello not implemented")
}
func (UnimplementedVetsBackendServer) GetVeterinarians(*VetRequest, VetsBackend_GetVeterinariansServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVeterinarians not implemented")
}
func (UnimplementedVetsBackendServer) GetVeterinarian(context.Context, *VetRequest) (*Veterinary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVeterinarian not implemented")
}
func (UnimplementedVetsBackendServer) UpdateVeterian(context.Context, *Veterinary) (*Veterinary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVeterian not implemented")
}
func (UnimplementedVetsBackendServer) UpdateFarmer(context.Context, *Farmer) (*Farmer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFarmer not implemented")
}
func (UnimplementedVetsBackendServer) CreateVeterian(context.Context, *Veterinary) (*Veterinary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVeterian not implemented")
}
func (UnimplementedVetsBackendServer) CreateFarmer(context.Context, *Farmer) (*Farmer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFarmer not implemented")
}
func (UnimplementedVetsBackendServer) GetFarmer(context.Context, *FarmerRequest) (*Farmer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFarmer not implemented")
}
func (UnimplementedVetsBackendServer) ScheduleSession(context.Context, *TreatmentSessionRequest) (*TreatmentSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleSession not implemented")
}
func (UnimplementedVetsBackendServer) mustEmbedUnimplementedVetsBackendServer() {}

// UnsafeVetsBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VetsBackendServer will
// result in compilation errors.
type UnsafeVetsBackendServer interface {
	mustEmbedUnimplementedVetsBackendServer()
}

func RegisterVetsBackendServer(s grpc.ServiceRegistrar, srv VetsBackendServer) {
	s.RegisterService(&VetsBackend_ServiceDesc, srv)
}

func _VetsBackend_TestHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).TestHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/TestHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).TestHello(ctx, req.(*TestHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetsBackend_GetVeterinarians_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VetsBackendServer).GetVeterinarians(m, &vetsBackendGetVeterinariansServer{stream})
}

type VetsBackend_GetVeterinariansServer interface {
	Send(*Veterinary) error
	grpc.ServerStream
}

type vetsBackendGetVeterinariansServer struct {
	grpc.ServerStream
}

func (x *vetsBackendGetVeterinariansServer) Send(m *Veterinary) error {
	return x.ServerStream.SendMsg(m)
}

func _VetsBackend_GetVeterinarian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).GetVeterinarian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/GetVeterinarian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).GetVeterinarian(ctx, req.(*VetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetsBackend_UpdateVeterian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Veterinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).UpdateVeterian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/UpdateVeterian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).UpdateVeterian(ctx, req.(*Veterinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetsBackend_UpdateFarmer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Farmer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).UpdateFarmer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/UpdateFarmer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).UpdateFarmer(ctx, req.(*Farmer))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetsBackend_CreateVeterian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Veterinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).CreateVeterian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/CreateVeterian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).CreateVeterian(ctx, req.(*Veterinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetsBackend_CreateFarmer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Farmer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).CreateFarmer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/CreateFarmer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).CreateFarmer(ctx, req.(*Farmer))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetsBackend_GetFarmer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).GetFarmer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/GetFarmer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).GetFarmer(ctx, req.(*FarmerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetsBackend_ScheduleSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreatmentSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetsBackendServer).ScheduleSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vet_backend.VetsBackend/ScheduleSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetsBackendServer).ScheduleSession(ctx, req.(*TreatmentSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VetsBackend_ServiceDesc is the grpc.ServiceDesc for VetsBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VetsBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vet_backend.VetsBackend",
	HandlerType: (*VetsBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestHello",
			Handler:    _VetsBackend_TestHello_Handler,
		},
		{
			MethodName: "GetVeterinarian",
			Handler:    _VetsBackend_GetVeterinarian_Handler,
		},
		{
			MethodName: "UpdateVeterian",
			Handler:    _VetsBackend_UpdateVeterian_Handler,
		},
		{
			MethodName: "UpdateFarmer",
			Handler:    _VetsBackend_UpdateFarmer_Handler,
		},
		{
			MethodName: "CreateVeterian",
			Handler:    _VetsBackend_CreateVeterian_Handler,
		},
		{
			MethodName: "CreateFarmer",
			Handler:    _VetsBackend_CreateFarmer_Handler,
		},
		{
			MethodName: "GetFarmer",
			Handler:    _VetsBackend_GetFarmer_Handler,
		},
		{
			MethodName: "ScheduleSession",
			Handler:    _VetsBackend_ScheduleSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVeterinarians",
			Handler:       _VetsBackend_GetVeterinarians_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/service.proto",
}
